# -----------------------------------------------------------------------------
# Application Configuration
# -----------------------------------------------------------------------------

# Name of the Spring Boot application.
# This is used for identifying the application in logs, monitoring tools, etc.
spring.application.name=spring-boot-ecommerce


# -----------------------------------------------------------------------------
# Database Configuration
# -----------------------------------------------------------------------------

# JDBC URL for connecting to the PostgreSQL database.
# Format: jdbc:postgresql://<host>:<port>/<database-name>
# - localhost:5432: The database server and port (default PostgreSQL port is 5432).
# - full-stack-ecommerce: The name of the database.
spring.datasource.url=jdbc:postgresql://localhost:5432/full-stack-ecommerce

# Username for connecting to the PostgreSQL database.
# Replace 'postgres' with your actual database username.
spring.datasource.username=postgres

# Password for connecting to the PostgreSQL database.
# Replace 'belvi' with your actual database password.
spring.datasource.password=belvi

# JDBC driver class for PostgreSQL.
# This is required for Spring Boot to connect to the PostgreSQL database.
spring.datasource.driver-class-name=org.postgresql.Driver


# -----------------------------------------------------------------------------
# Hibernate (JPA) Configuration
# -----------------------------------------------------------------------------

# Specifies the Hibernate dialect for PostgreSQL.
# This ensures Hibernate generates SQL queries compatible with PostgreSQL.
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Configures Hibernate's schema generation behavior.
# - update: Automatically updates the database schema based on your entity classes.
# Other options include:
# - create: Creates the schema, destroying previous data.
# - create-drop: Creates the schema and drops it when the session ends.
# - validate: Validates the schema without making changes.
# - none: Disables automatic schema updates.
spring.jpa.hibernate.ddl-auto=update


# -----------------------------------------------------------------------------
# Connection Pooling (HikariCP) Configuration
# -----------------------------------------------------------------------------

# Maximum number of connections in the connection pool.
# Adjust this based on your application's concurrency requirements.
spring.datasource.hikari.maximum-pool-size=10

# Minimum number of idle connections in the pool.
# Helps maintain a few connections ready for use.
spring.datasource.hikari.minimum-idle=2

# Maximum time (in milliseconds) that a connection can remain idle in the pool.
# After this time, the connection will be removed from the pool.
spring.datasource.hikari.idle-timeout=30000

# Maximum lifetime (in milliseconds) of a connection in the pool.
# After this time, the connection will be removed from the pool, even if it's in use.
spring.datasource.hikari.max-lifetime=86400000


# -----------------------------------------------------------------------------
# Logging Configuration
# -----------------------------------------------------------------------------

# Enables logging of SQL queries to the console.
# Useful for debugging, but disable in production for performance reasons.
spring.jpa.show-sql=true

# Formats the SQL queries logged to the console for better readability.
spring.jpa.properties.hibernate.format_sql=true


# -----------------------------------------------------------------------------
# Flyway (Database Migration) Configuration
# -----------------------------------------------------------------------------

# Enables Flyway for database migrations.
# Flyway manages database schema changes using SQL scripts.
spring.flyway.enabled=true

# Location of the Flyway migration scripts.
# By default, Flyway looks for scripts in the `classpath:db/migration` folder.
spring.flyway.locations=classpath:db/migration


# -----------------------------------------------------------------------------
# Profile Configuration
# -----------------------------------------------------------------------------

# Specifies the active Spring profile.
# Use different profiles (e.g., dev, prod) to manage environment-specific configurations.
# Example: Create `application-dev.properties` and `application-prod.properties`.
spring.profiles.active=dev
